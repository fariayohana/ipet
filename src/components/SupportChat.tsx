'use client';

import { useState, useEffect, useRef } from 'react';

interface Message {
  id: number;
  text: string;
  sender: 'user' | 'support';
  timestamp: Date;
}

interface SupportChatProps {
  isOpen: boolean;
  onClose: () => void;
}

const supportResponses = [
  "Ol√°! Como posso ajud√°-lo hoje? üòä",
  "Entendo sua preocupa√ß√£o. Vou verificar isso para voc√™.",
  "Seu pet est√° em √≥timas m√£os! Nossos profissionais s√£o altamente qualificados.",
  "O motorista est√° a caminho. Voc√™ pode acompanhar pelo mapa em tempo real.",
  "Posso transferir voc√™ para falar diretamente com a petshop, se preferir.",
  "Obrigado por escolher o iPet! Estamos sempre aqui para ajudar.",
  "Vou anotar sua sugest√£o e repassar para nossa equipe de desenvolvimento.",
  "O servi√ßo deve ser conclu√≠do em aproximadamente 30 minutos.",
  "Voc√™ receber√° uma notifica√ß√£o assim que seu pet estiver pronto para retornar.",
  "H√° algo mais em que posso ajud√°-lo?"
];

const quickReplies = [
  "Onde est√° meu pet?",
  "Quanto tempo falta?",
  "Falar com motorista",
  "Cancelar pedido",
  "Problema com pagamento",
  "Reclama√ß√£o"
];

export default function SupportChat({ isOpen, onClose }: SupportChatProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      // Mensagem inicial do suporte
      setTimeout(() => {
        addSupportMessage("Ol√°! Sou a Ana do suporte iPet. Como posso ajud√°-lo hoje? üòä");
      }, 500);
    }
  }, [isOpen]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const addMessage = (text: string, sender: 'user' | 'support') => {
    const newMessage: Message = {
      id: Date.now(),
      text,
      sender,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const addSupportMessage = (text: string) => {
    setIsTyping(true);
    setTimeout(() => {
      setIsTyping(false);
      addMessage(text, 'support');
    }, 1000 + Math.random() * 1000); // Simula tempo de digita√ß√£o
  };

  const handleSendMessage = () => {
    if (!inputText.trim()) return;

    addMessage(inputText, 'user');
    setInputText('');

    // Simular resposta do suporte
    setTimeout(() => {
      const randomResponse = supportResponses[Math.floor(Math.random() * supportResponses.length)];
      addSupportMessage(randomResponse);
    }, 500);
  };

  const handleQuickReply = (reply: string) => {
    addMessage(reply, 'user');
    
    // Respostas espec√≠ficas para quick replies
    setTimeout(() => {
      let response = "";
      switch (reply) {
        case "Onde est√° meu pet?":
          response = "Seu pet est√° atualmente na petshop recebendo o servi√ßo de banho e tosa. Voc√™ pode acompanhar o status em tempo real na tela de rastreamento! üêï‚ú®";
          break;
        case "Quanto tempo falta?":
          response = "Estimamos que o servi√ßo ser√° conclu√≠do em aproximadamente 25 minutos. Voc√™ receber√° uma notifica√ß√£o quando estivermos retornando com seu pet! ‚è∞";
          break;
        case "Falar com motorista":
          response = "Vou conect√°-lo com o Carlos, nosso motorista. Ele est√° dispon√≠vel pelo telefone (11) 99999-8888 ou voc√™ pode usar o bot√£o de liga√ß√£o na tela de rastreamento! üìû";
          break;
        case "Cancelar pedido":
          response = "Entendo que voc√™ gostaria de cancelar. Como seu pet j√° est√° sendo atendido, posso verificar as op√ß√µes dispon√≠veis. Posso transferir voc√™ para um supervisor? ü§î";
          break;
        case "Problema com pagamento":
          response = "Vou verificar seu pagamento agora. Qual foi o m√©todo utilizado? PIX, cart√£o ou dinheiro? Posso resolver isso rapidamente para voc√™! üí≥";
          break;
        case "Reclama√ß√£o":
          response = "Lamento que tenha tido uma experi√™ncia negativa. Sua opini√£o √© muito importante para n√≥s. Pode me contar o que aconteceu para que eu possa ajudar? üòî";
          break;
        default:
          response = supportResponses[Math.floor(Math.random() * supportResponses.length)];
      }
      addSupportMessage(response);
    }, 800);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed bottom-4 right-4 w-80 h-96 max-w-[calc(100vw-2rem)] max-h-[calc(100vh-2rem)] bg-white rounded-lg shadow-2xl border border-gray-200 flex flex-col z-50 md:w-80 md:h-96">
      {/* Header */}
      <div className="bg-orange-500 text-white p-4 rounded-t-lg flex items-center justify-between">
        <div className="flex items-center">
          <div className="w-8 h-8 bg-orange-600 rounded-full flex items-center justify-center mr-3">
            üë©‚Äçüíº
          </div>
          <div>
            <h3 className="font-semibold">Suporte iPet</h3>
            <p className="text-xs opacity-90">Ana - Online</p>
          </div>
        </div>
        <button
          onClick={onClose}
          className="text-white hover:text-gray-200 text-xl font-bold"
        >
          √ó
        </button>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-3">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-xs px-3 py-2 rounded-lg text-sm ${
                message.sender === 'user'
                  ? 'bg-orange-500 text-white'
                  : 'bg-gray-100 text-gray-800 border'
              }`}
            >
              {message.text}
              <div className={`text-xs mt-1 opacity-70 ${
                message.sender === 'user' ? 'text-orange-100' : 'text-gray-500'
              }`}>
                {message.timestamp.toLocaleTimeString('pt-BR', { 
                  hour: '2-digit', 
                  minute: '2-digit' 
                })}
              </div>
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="flex justify-start">
            <div className="bg-gray-100 text-gray-800 border px-3 py-2 rounded-lg text-sm">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Quick Replies */}
      {messages.length <= 2 && (
        <div className="px-4 pb-2">
          <p className="text-xs text-gray-600 mb-2 font-medium">Respostas r√°pidas:</p>
          <div className="flex flex-wrap gap-1">
            {quickReplies.slice(0, 3).map((reply) => (
              <button
                key={reply}
                onClick={() => handleQuickReply(reply)}
                className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full hover:bg-gray-200 transition-colors border"
              >
                {reply}
              </button>
            ))}
          </div>
          <div className="flex flex-wrap gap-1 mt-1">
            {quickReplies.slice(3).map((reply) => (
              <button
                key={reply}
                onClick={() => handleQuickReply(reply)}
                className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full hover:bg-gray-200 transition-colors border"
              >
                {reply}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Input */}
      <div className="p-4 border-t border-gray-200">
        <div className="flex space-x-2">
          <input
            type="text"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Digite sua mensagem..."
            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-sm text-gray-800 placeholder-gray-500"
          />
          <button
            onClick={handleSendMessage}
            disabled={!inputText.trim()}
            className="px-3 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
          >
            üì§
          </button>
        </div>
      </div>
    </div>
  );
}
